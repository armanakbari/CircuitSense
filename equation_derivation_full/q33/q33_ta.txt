(((-C2 + C3*C4*s**2*(-C2*R1*R2 - C2*R1*R3 - C2*R2*R3 - C5*R2*R3) - C4 - s*(C2*C3*R2 + C2*C3*R3 + C2*C4*R1 + C2*C4*R3 + C3*C4*R2 + C3*C4*R3))/(C3*C4*L1*(C1*C2*R1*R2 + C1*C2*R1*R3 + C1*C2*R2*R3 + C1*C5*R1*R2 + C1*C5*R1*R3 + C1*C5*R2*R3 + C2*C5*R1*R2 + C2*C5*R1*R3 + C2*C5*R2*R3)))/(s**4 + s**3*(C1*C2*C3*C4*R1*R2*R3 + C1*C2*C3*L1*R2 + C1*C2*C3*L1*R3 + C1*C2*C4*L1*R1 + C1*C2*C4*L1*R3 + C1*C3*C4*C5*R1*R2*R3 + C1*C3*C4*L1*R2 + C1*C3*C4*L1*R3 + C1*C3*C5*L1*R2 + C1*C3*C5*L1*R3 + C1*C4*C5*L1*R1 + C1*C4*C5*L1*R3 + C2*C3*C4*C5*R1*R2*R3 + C2*C3*C5*L1*R2 + C2*C3*C5*L1*R3 + C2*C4*C5*L1*R1 + C2*C4*C5*L1*R3 + C3*C4*C5*L1*R2 + C3*C4*C5*L1*R3)/(C1*C2*C3*C4*L1*R1*R2 + C1*C2*C3*C4*L1*R1*R3 + C1*C2*C3*C4*L1*R2*R3 + C1*C3*C4*C5*L1*R1*R2 + C1*C3*C4*C5*L1*R1*R3 + C1*C3*C4*C5*L1*R2*R3 + C2*C3*C4*C5*L1*R1*R2 + C2*C3*C4*C5*L1*R1*R3 + C2*C3*C4*C5*L1*R2*R3) + s**2*(C1*C2*C3*R2*R3 + C1*C2*C4*R1*R2 + C1*C2*C4*R2*R3 + C1*C2*L1 + C1*C3*C4*R1*R2 + C1*C3*C4*R1*R3 + C1*C3*C5*R2*R3 + C1*C4*C5*R1*R2 + C1*C4*C5*R2*R3 + C1*C4*L1 + C1*C5*L1 + C2*C3*C4*R1*R2 + C2*C3*C4*R1*R3 + C2*C3*C4*R2*R3 + C2*C3*C5*R2*R3 + C2*C4*C5*R1*R2 + C2*C4*C5*R2*R3 + C2*C5*L1 + C3*C4*C5*R2*R3 + C4*C5*L1)/(C1*C2*C3*C4*L1*R1*R2 + C1*C2*C3*C4*L1*R1*R3 + C1*C2*C3*C4*L1*R2*R3 + C1*C3*C4*C5*L1*R1*R2 + C1*C3*C4*C5*L1*R1*R3 + C1*C3*C4*C5*L1*R2*R3 + C2*C3*C4*C5*L1*R1*R2 + C2*C3*C4*C5*L1*R1*R3 + C2*C3*C4*C5*L1*R2*R3) + s*(C1*C2*R2 + C1*C3*R2 + C1*C3*R3 + C1*C4*R1 + C1*C4*R2 + C1*C4*R3 + C1*C5*R2 + C2*C3*R2 + C2*C3*R3 + C2*C4*R1 + C2*C4*R3 + C2*C5*R2 + C3*C4*R2 + C3*C4*R3 + C4*C5*R2)/(C1*C2*C3*C4*L1*R1*R2 + C1*C2*C3*C4*L1*R1*R3 + C1*C2*C3*C4*L1*R2*R3 + C1*C3*C4*C5*L1*R1*R2 + C1*C3*C4*C5*L1*R1*R3 + C1*C3*C4*C5*L1*R2*R3 + C2*C3*C4*C5*L1*R1*R2 + C2*C3*C4*C5*L1*R1*R3 + C2*C3*C4*C5*L1*R2*R3) + (C1 + C2 + C4)/(C1*C2*C3*C4*L1*R1*R2 + C1*C2*C3*C4*L1*R1*R3 + C1*C2*C3*C4*L1*R2*R3 + C1*C3*C4*C5*L1*R1*R2 + C1*C3*C4*C5*L1*R1*R3 + C1*C3*C4*C5*L1*R2*R3 + C2*C3*C4*C5*L1*R1*R2 + C2*C3*C4*C5*L1*R1*R3 + C2*C3*C4*C5*L1*R2*R3)))*1